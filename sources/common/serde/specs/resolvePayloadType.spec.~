import util from 'util';
import {
  randomUUID,
} from 'node:crypto';
import {
  describe,
  it,
} from 'mocha';
import {
  expect,
} from 'chai';
import {
  COSEAlgorithms,
} from '../fb/generated/mjs/schedule/c-o-s-e-algorithms.mjs';
import {
  PublicKeyCredentialType,
} from '../fb/generated/mjs/schedule/public-key-credential-type.mjs';
// import {
//   PublicKeyCredentialCreationOptions,
// } from '../fb/generated/mjs/schedule/public-key-credential-creation-options.mjs';
import {
  AuthenticatorAttachment,
} from '../fb/generated/mjs/schedule/authenticator-attachment.mjs';
import {
  ResidentKeyRequirement,
} from '../fb/generated/mjs/schedule/resident-key-requirement.mjs';
import {
  AttestationConveyancePreference,
} from '../fb/generated/mjs/schedule/attestation-conveyance-preference.mjs';
import {
  serialize as serializePublicKeyCredentialCreationOptions,
} from '../api/PublicKeyCredentialCreationOptions/serialize.mjs';
import {
  resolvePayloadType,
} from '../api/helpers/resolvePayloadType.mjs';

describe(resolvePayloadType.name, function describePublicKeyCredentialCreationOptions() {
  const log = util.debuglog('serde:specs');
  const debuglog = (...args) => {
    log(util.inspect(...args, {
      // showHidden: true,
      depth: Infinity,
      colors: true,
      // showProxy: true,
      // maxArrayLength: Infinity,
      // maxStringLength: Infinity,
      breakLength: 160,
      // compact: false,
      // sorted: true,
      // getters: true,
    }));
  };

  it('should resolvePayloadType', async function itResolvesPayloadType() {
    const publicKeyCredentialCreationOptions = {
      challenge: Uint8Array.from(randomUUID()),
      rp: {
        id: randomUUID(),
        name: randomUUID(),
      },
      user: {
        id: Uint8Array.from(randomUUID()),
        name: randomUUID(),
        displayName: randomUUID(),
      },
      pubKeyCredParams: [{
        alg: COSEAlgorithms.ES256,
        type: PublicKeyCredentialType.publicKey,
      }],
      authenticatorSelection: {
        authenticatorAttachment: AuthenticatorAttachment.platform,
        userVerification: ResidentKeyRequirement.required,
      },
      timeout: 60000,
      attestation: AttestationConveyancePreference.direct,
    };

    const serializedPublicKeyCredentialCreationOptions = serializePublicKeyCredentialCreationOptions(
      publicKeyCredentialCreationOptions,
      debuglog,
    );

    const payloadType = resolvePayloadType(serializedPublicKeyCredentialCreationOptions, debuglog);

    return expect(payloadType).to.exist;
  });
});
