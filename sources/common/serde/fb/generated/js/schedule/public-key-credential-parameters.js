// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { COSEAlgorithms } from '../schedule/c-o-s-e-algorithms';
import { PublicKeyCredentialType } from '../schedule/public-key-credential-type';
export class PublicKeyCredentialParameters {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsPublicKeyCredentialParameters(bb, obj) {
        return (obj || new PublicKeyCredentialParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsPublicKeyCredentialParameters(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new PublicKeyCredentialParameters()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    alg() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : COSEAlgorithms.ES256;
    }
    type() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : PublicKeyCredentialType.publicKey;
    }
    static startPublicKeyCredentialParameters(builder) {
        builder.startObject(2);
    }
    static addAlg(builder, alg) {
        builder.addFieldInt32(0, alg, COSEAlgorithms.ES256);
    }
    static addType(builder, type) {
        builder.addFieldInt8(1, type, PublicKeyCredentialType.publicKey);
    }
    static endPublicKeyCredentialParameters(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createPublicKeyCredentialParameters(builder, alg, type) {
        PublicKeyCredentialParameters.startPublicKeyCredentialParameters(builder);
        PublicKeyCredentialParameters.addAlg(builder, alg);
        PublicKeyCredentialParameters.addType(builder, type);
        return PublicKeyCredentialParameters.endPublicKeyCredentialParameters(builder);
    }
}
