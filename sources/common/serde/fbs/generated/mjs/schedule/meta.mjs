// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';

export class Meta {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }
  static getRootAsMeta(bb, obj) {
    return (obj || new Meta()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }
  static getSizePrefixedRootAsMeta(bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Meta()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }
  id(optionalEncoding) {
    const offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  }
  ts() {
    const offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
  }
  static startMeta(builder) {
    builder.startObject(2);
  }
  static addId(builder, idOffset) {
    builder.addFieldOffset(0, idOffset, 0);
  }
  static addTs(builder, ts) {
    builder.addFieldFloat64(1, ts, 0.0);
  }
  static endMeta(builder) {
    const offset = builder.endObject();
    return offset;
  }
  static createMeta(builder, idOffset, ts) {
    Meta.startMeta(builder);
    Meta.addId(builder, idOffset);
    Meta.addTs(builder, ts);
    return Meta.endMeta(builder);
  }
}
