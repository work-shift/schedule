// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';

export class User {
  constructor() {
    this.bb = null;
    this.bb_pos = 0;
  }
  __init(i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }
  static getRootAsUser(bb, obj) {
    return (obj || new User()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }
  static getSizePrefixedRootAsUser(bb, obj) {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new User()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }
  id(index) {
    const offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
  }
  idLength() {
    const offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  }
  idArray() {
    const offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
  }
  name(optionalEncoding) {
    const offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  }
  displayName(optionalEncoding) {
    const offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
  }
  static startUser(builder) {
    builder.startObject(3);
  }
  static addId(builder, idOffset) {
    builder.addFieldOffset(0, idOffset, 0);
  }
  static createIdVector(builder, data) {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt32(data[i]);
    }
    return builder.endVector();
  }
  static startIdVector(builder, numElems) {
    builder.startVector(4, numElems, 4);
  }
  static addName(builder, nameOffset) {
    builder.addFieldOffset(1, nameOffset, 0);
  }
  static addDisplayName(builder, displayNameOffset) {
    builder.addFieldOffset(2, displayNameOffset, 0);
  }
  static endUser(builder) {
    const offset = builder.endObject();
    builder.requiredField(offset, 4); // id
    builder.requiredField(offset, 6); // name
    builder.requiredField(offset, 8); // display_name
    return offset;
  }
  static createUser(builder, idOffset, nameOffset, displayNameOffset) {
    User.startUser(builder);
    User.addId(builder, idOffset);
    User.addName(builder, nameOffset);
    User.addDisplayName(builder, displayNameOffset);
    return User.endUser(builder);
  }
}
